import { writeFileSync, readdirSync, statSync } from "fs";

/**
 * make a string pascal case
 *
 * @param {string} name
 * @returns string
 */
function classify(name) {
  return (
    name.substring(0, 1).toUpperCase() +
    name.substring(1).replace(/-([a-z])/g, (_, char) => char.toUpperCase())
  );
}

function iconName(fullName) {
  return fullName.substring(5);
}

function iconType(fullName) {
  return fullName.substring(0, 4);
}

/**
 * generate a component template
 *
 * @param {string} fullName
 * @returns string
 */
function template(/** @type {string} */ fullName) {
  return `import { ChangeDetectionStrategy, Component, input } from '@angular/core';

/**
 * icon for ${iconName(fullName)}
 *
 * this file is generated by generate-icons.mjs
 */
@Component({
  changeDetection: ChangeDetectionStrategy.OnPush,
  selector: 'app-${fullName}',
  standalone: true,
  templateUrl: './${fullName}.component.html',
})
export class ${classify(fullName)}Component {
  class = input<string>('h-4 ${iconType(fullName) === "flag" ? "w-5" : "w-4"}');
}
`;
}

readdirSync("src/app/icons").forEach((file) => {
  if (
    !["icon-", "flag-"].some((prefix) => file.startsWith(prefix)) ||
    !statSync(`src/app/icons/${file}`).isDirectory()
  ) {
    return;
  }
  const componentPath = `src/app/icons/${file}/${file}.component.ts`;
  console.log("generating", componentPath);
  writeFileSync(componentPath, template(file));
});
