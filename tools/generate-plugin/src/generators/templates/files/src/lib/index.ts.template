import {
  EnvironmentProviders,
  InjectionToken,
  LOCALE_ID,
  makeEnvironmentProviders,
} from '@angular/core';

<% for (const [name, languages] of templates) {
  for (const lang of languages) { %>
import <%= name %>_template_<%= lang %> from './<%= name + '.' + lang %>';
<% } } %>

<% for (const [name, languages] of templates) { %>
export const <%= shout(name) %>_RULES_TEMPLATE = new InjectionToken<string>(
  '<%= shout(name) %>_RULES_TEMPLATE',
);

function get<%= pascalize(name) %>Template(<% if (languages.length > 1) { %>locale: string<% } %>): string {
<% for (const lang of languages.filter(l => l !== 'default')) { %>
  if (locale.startsWith('<%= lang %>')) {
    return <%= name %>_template_<%= lang %>;
  }<% } %>
  return <%= name %>_template_default;
}
<% } %>

const rulesTemplateNames = [<%- templates.map(t => `'${t[0]}'`).join(', ') %>] as const;
export type RulesTemplateName = (typeof rulesTemplateNames)[number];

export function provideRulesTemplates(): EnvironmentProviders {
  return makeEnvironmentProviders([
<% for (const [name] of templates) { %>
    {
      provide: <%= shout(name) %>_RULES_TEMPLATE,
      useFactory: get<%= pascalize(name) %>Template,
      deps: [LOCALE_ID],
    },<% } %>
  ]);
}
