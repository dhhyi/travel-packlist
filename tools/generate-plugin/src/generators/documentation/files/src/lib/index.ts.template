import {
  EnvironmentProviders,
  InjectionToken,
  LOCALE_ID,
  makeEnvironmentProviders,
} from '@angular/core';

<% for (const [group, languages] of documentations) {
  for (const lang of languages) {
%>import <%= camelize(group + '-' + lang) %> from './<%= group %>.<%= lang %>';
<% } } %>

<% for (const [group, languages] of documentations) { %>
const <%= shout(group) %> = new InjectionToken<string>(
  '<%= shout(group) %>',
);

function get<%= pascalize(group) %>(locale: string): string {
<% for (const lang of languages.filter(l => l !== 'default')) { %>
  if (locale.startsWith('<%= lang %>')) {
    return <%= camelize(group + '-' + lang) %>;
  }<% } %>
  return <%= camelize(group + '-default') %>;
}

<% } %>

export function provideDocumentationTopics(): EnvironmentProviders {
  return makeEnvironmentProviders([
<% for (const [group] of documentations) { %>
    {
      provide: <%= shout(group) %>,
      useFactory: get<%= pascalize(group) %>,
      deps: [LOCALE_ID],
    },
<% } %>
  ]);
}

export const availableDocumentationTopics = {
<% for (const [group] of documentations) { %>
  '<%= group.replace('-documentation', '') %>': <%= shout(group) %>,
<% } %>
}

export type AvailableDocumentationTopic = keyof typeof availableDocumentationTopics;
