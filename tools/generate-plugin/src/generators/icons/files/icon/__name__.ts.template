import { ChangeDetectionStrategy, Component, input, computed, ElementRef, afterRender, inject } from '@angular/core';

/**
 * icon for <%= icon %>
 *
 * this file is generated
 */
@Component({
  changeDetection: ChangeDetectionStrategy.OnPush,
  selector: 'app-<%= icon %>, [<%= camelize(icon) %>]',
  standalone: true,
  templateUrl: './<%= name %>.svg',
})
export class <%= classify(icon) %>Component {
  readonly <%= camelize(icon) %> = input<string | undefined>();
  readonly class = input<string | undefined>();
  readonly iconClass = input<string | undefined>();

  private readonly svgClass = computed(() => {
    const classes = (this.<%= camelize(icon) %>() === undefined ? this.class() : this.iconClass())?.split(' ') ?? [];
    if (!classes.find((c) => c.startsWith('h-'))) {
      classes.push('h-[1rem]');
    }
    if (!classes.find((c) => c.startsWith('w-'))) {
      classes.push('<% if (icon.startsWith('flag')) { %>w-[1.25rem]<% } else { %>w-[1rem]<% } %>');
    }
    return classes.filter(x => !!x);
  });

  private elementRef = inject(ElementRef);

  constructor() {
    afterRender(() => {
      const svg = this.elementRef.nativeElement.querySelector('svg');
      for (let i = svg.classList.length - 1; i >= 0; i--) {
        svg.classList.remove(svg.classList[i]);
      }
      const classes = this.svgClass();
      if (classes.length) {
        svg.classList.add(...classes);
      }
    });
  }
}
